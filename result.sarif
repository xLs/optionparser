{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Resharper",
          "rules": [
            {
              "id": "CppCStyleCast",
              "shortDescription": {
                "text": "C-style cast is used instead of a C++ cast"
              },
              "properties": {
                "tags": ["Common Practices and Code Improvements"],
                "Category": "BestPractice"
              }
            },
            {
              "id": "CppClangTidyBugproneNarrowingConversions",
              "shortDescription": {
                "text": "bugprone-narrowing-conversions clang-tidy check"
              },
              "properties": {
                "tags": ["Clang-Tidy Checks"],
                "Category": "ClangTidy"
              }
            },
            {
              "id": "CppClangTidyCertErr34C",
              "shortDescription": {
                "text": "cert-err34-c clang-tidy check"
              },
              "properties": {
                "tags": ["Clang-Tidy Checks"],
                "Category": "ClangTidy"
              }
            },
            {
              "id": "CppClangTidyClangDiagnosticCastQual",
              "shortDescription": {
                "text": "cast-qual clang diagnostic"
              },
              "properties": {
                "tags": ["Clang Diagnostics"],
                "Category": "Clang"
              }
            },
            {
              "id": "CppClangTidyClangDiagnosticMain",
              "shortDescription": {
                "text": "main clang diagnostic"
              },
              "properties": {
                "tags": ["Clang Diagnostics"],
                "Category": "Clang"
              }
            },
            {
              "id": "CppClangTidyCppcoreguidelinesSpecialMemberFunctions",
              "shortDescription": {
                "text": "cppcoreguidelines-special-member-functions clang-tidy check"
              },
              "properties": {
                "tags": ["Clang-Tidy Checks"],
                "Category": "ClangTidy"
              }
            },
            {
              "id": "CppClangTidyReadabilityDeleteNullPointer",
              "shortDescription": {
                "text": "readability-delete-null-pointer clang-tidy check"
              },
              "properties": {
                "tags": ["Clang-Tidy Checks"],
                "Category": "ClangTidy"
              }
            },
            {
              "id": "CppClangTidyReadabilityInconsistentDeclarationParameterName",
              "shortDescription": {
                "text": "readability-inconsistent-declaration-parameter-name clang-tidy check"
              },
              "properties": {
                "tags": ["Clang-Tidy Checks"],
                "Category": "ClangTidy"
              }
            },
            {
              "id": "CppFunctionDoesntReturnValue",
              "shortDescription": {
                "text": "No return statement in a function or a lambda returning non-void"
              },
              "properties": {
                "tags": ["Potential Code Quality Issues"],
                "Category": "CodeSmell"
              }
            },
            {
              "id": "CppInitializedValueIsAlwaysRewritten",
              "shortDescription": {
                "text": "Declarator is reassigned in all paths before being read"
              },
              "properties": {
                "tags": ["Potential Code Quality Issues"],
                "Category": "CodeSmell"
              }
            },
            {
              "id": "CppJoinDeclarationAndAssignment",
              "shortDescription": {
                "text": "Declaration and assignment can be joined"
              },
              "properties": {
                "tags": ["Redundancies in Code"],
                "Category": "CodeRedundancy"
              }
            },
            {
              "id": "CppLocalVariableMayBeConst",
              "shortDescription": {
                "text": "Local variable can be made const"
              },
              "properties": {
                "tags": ["Common Practices and Code Improvements"],
                "Category": "BestPractice"
              }
            },
            {
              "id": "CppMemberFunctionMayBeConst",
              "shortDescription": {
                "text": "Member function can be made const"
              },
              "properties": {
                "tags": ["Common Practices and Code Improvements"],
                "Category": "BestPractice"
              }
            },
            {
              "id": "CppNonInlineFunctionDefinitionInHeaderFile",
              "shortDescription": {
                "text": "Non-inline function definition in a header file"
              },
              "properties": {
                "tags": ["Potential Code Quality Issues"],
                "Category": "CodeSmell"
              }
            },
            {
              "id": "CppParameterMayBeConstPtrOrRef",
              "shortDescription": {
                "text": "Parameter can be made pointer/reference to const"
              },
              "properties": {
                "tags": ["Common Practices and Code Improvements"],
                "Category": "BestPractice"
              }
            },
            {
              "id": "CppParameterValueIsReassigned",
              "shortDescription": {
                "text": "Parameter is always rewritten in function body before being read"
              },
              "properties": {
                "tags": ["Potential Code Quality Issues"],
                "Category": "CodeSmell"
              }
            },
            {
              "id": "CppPossiblyUninitializedMember",
              "shortDescription": {
                "text": "Possibly uninitialized class member"
              },
              "properties": {
                "tags": ["Potential Code Quality Issues"],
                "Category": "CodeSmell"
              }
            },
            {
              "id": "CppVariableCanBeMadeConstexpr",
              "shortDescription": {
                "text": "Variable can be made constexpr"
              },
              "properties": {
                "tags": ["Common Practices and Code Improvements"],
                "Category": "BestPractice"
              }
            },
            {
              "id": "CppZeroConstantCanBeReplacedWithNullptr",
              "shortDescription": {
                "text": "Zero constant can be replaced with nullptr"
              },
              "properties": {
                "tags": ["Common Practices and Code Improvements"],
                "Category": "BestPractice"
              }
            }
          ]
        }
      },
      "originalUriBaseIds": {
        "SRCROOT": {
          "uri": "file:///d:/Github/optionparser/"
        }
      },
      "results": [
        {
          "ruleId": "CppVariableCanBeMadeConstexpr",
          "level": "note",
          "message": {
            "text": "Variable 'usage' can be made constexpr",
            "id": "CppVariableCanBeMadeConstexpr"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 26,
                  "endColumn": 31,
                  "charOffset": 210,
                  "charLength": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppZeroConstantCanBeReplacedWithNullptr",
          "level": "note",
          "message": {
            "text": "Zero constant can be replaced with nullptr",
            "id": "CppZeroConstantCanBeReplacedWithNullptr"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 8,
                  "endColumn": 9,
                  "charOffset": 231,
                  "charLength": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppZeroConstantCanBeReplacedWithNullptr",
          "level": "note",
          "message": {
            "text": "Zero constant can be replaced with nullptr",
            "id": "CppZeroConstantCanBeReplacedWithNullptr"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 11,
                  "endColumn": 12,
                  "charOffset": 234,
                  "charLength": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppZeroConstantCanBeReplacedWithNullptr",
          "level": "note",
          "message": {
            "text": "Zero constant can be replaced with nullptr",
            "id": "CppZeroConstantCanBeReplacedWithNullptr"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 8,
                  "endColumn": 9,
                  "charOffset": 957,
                  "charLength": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppZeroConstantCanBeReplacedWithNullptr",
          "level": "note",
          "message": {
            "text": "Zero constant can be replaced with nullptr",
            "id": "CppZeroConstantCanBeReplacedWithNullptr"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 11,
                  "endColumn": 12,
                  "charOffset": 960,
                  "charLength": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppZeroConstantCanBeReplacedWithNullptr",
          "level": "note",
          "message": {
            "text": "Zero constant can be replaced with nullptr",
            "id": "CppZeroConstantCanBeReplacedWithNullptr"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 7,
                  "endColumn": 8,
                  "charOffset": 1277,
                  "charLength": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppZeroConstantCanBeReplacedWithNullptr",
          "level": "note",
          "message": {
            "text": "Zero constant can be replaced with nullptr",
            "id": "CppZeroConstantCanBeReplacedWithNullptr"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 10,
                  "endColumn": 11,
                  "charOffset": 1280,
                  "charLength": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppZeroConstantCanBeReplacedWithNullptr",
          "level": "note",
          "message": {
            "text": "Zero constant can be replaced with nullptr",
            "id": "CppZeroConstantCanBeReplacedWithNullptr"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 7,
                  "endColumn": 8,
                  "charOffset": 1465,
                  "charLength": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppZeroConstantCanBeReplacedWithNullptr",
          "level": "note",
          "message": {
            "text": "Zero constant can be replaced with nullptr",
            "id": "CppZeroConstantCanBeReplacedWithNullptr"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 10,
                  "endColumn": 11,
                  "charOffset": 1468,
                  "charLength": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppZeroConstantCanBeReplacedWithNullptr",
          "level": "note",
          "message": {
            "text": "Zero constant can be replaced with nullptr",
            "id": "CppZeroConstantCanBeReplacedWithNullptr"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 31,
                  "endColumn": 32,
                  "charOffset": 1489,
                  "charLength": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 23,
                  "endColumn": 44,
                  "charOffset": 1581,
                  "charLength": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyClangDiagnosticCastQual",
          "message": {
            "text": "Cast from 'const option::Descriptor *' to 'option::Descriptor *' drops const qualifier [clang-diagnostic-cast-qual]",
            "id": "CppClangTidyClangDiagnosticCastQual"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 44,
                  "endColumn": 49,
                  "charOffset": 1602,
                  "charLength": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppFunctionDoesntReturnValue",
          "message": {
            "text": "No return statement in a function returning non-void",
            "id": "CppFunctionDoesntReturnValue"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 14,
                  "endColumn": 22,
                  "charOffset": 2706,
                  "charLength": 8
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyClangDiagnosticMain",
          "message": {
            "text": "ISO C++ does not allow 'main' to be used by a program [clang-diagnostic-main]",
            "id": "CppClangTidyClangDiagnosticMain"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 5,
                  "endColumn": 9,
                  "charOffset": 2893,
                  "charLength": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 16,
                  "endColumn": 30,
                  "charOffset": 2904,
                  "charLength": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyClangDiagnosticCastQual",
          "message": {
            "text": "Cast from 'char **' to 'const char **' must have all intermediate pointers const qualified to be safe [clang-diagnostic-cast-qual]",
            "id": "CppClangTidyClangDiagnosticCastQual"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 30,
                  "endColumn": 31,
                  "charOffset": 2918,
                  "charLength": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyReadabilityInconsistentDeclarationParameterName",
          "level": "note",
          "message": {
            "text": "Function 'option::free' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]",
            "id": "CppClangTidyReadabilityInconsistentDeclarationParameterName"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 7,
                  "endColumn": 11,
                  "charOffset": 1041,
                  "charLength": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyCppcoreguidelinesSpecialMemberFunctions",
          "level": "note",
          "message": {
            "text": "Class 'Arg' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]",
            "id": "CppClangTidyCppcoreguidelinesSpecialMemberFunctions"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 9,
                  "endColumn": 12,
                  "charOffset": 1285,
                  "charLength": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyReadabilityDeleteNullPointer",
          "level": "note",
          "message": {
            "text": "'if' statement is unnecessary; deleting null pointer has no effect [readability-delete-null-pointer]",
            "id": "CppClangTidyReadabilityDeleteNullPointer"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endColumn": 26,
                  "charOffset": 1659,
                  "charLength": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppNonInlineFunctionDefinitionInHeaderFile",
          "message": {
            "text": "Definition of function 'size_t option::desclen(const Descriptor* descs)' in a header file should have an 'inline' specifier",
            "id": "CppNonInlineFunctionDefinitionInHeaderFile"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 9,
                  "endColumn": 16,
                  "charOffset": 2290,
                  "charLength": 7
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyCppcoreguidelinesSpecialMemberFunctions",
          "level": "note",
          "message": {
            "text": "Class 'Options' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]",
            "id": "CppClangTidyCppcoreguidelinesSpecialMemberFunctions"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 8,
                  "endColumn": 15,
                  "charOffset": 2448,
                  "charLength": 7
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppPossiblyUninitializedMember",
          "message": {
            "text": "Member '_message' is not initialized in this constructor",
            "id": "CppPossiblyUninitializedMember"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 3,
                  "endColumn": 10,
                  "charOffset": 2473,
                  "charLength": 7
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 16,
                  "endColumn": 29,
                  "charOffset": 2962,
                  "charLength": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyClangDiagnosticCastQual",
          "message": {
            "text": "Cast from 'const option::Descriptor *' to 'option::Descriptor *' drops const qualifier [clang-diagnostic-cast-qual]",
            "id": "CppClangTidyClangDiagnosticCastQual"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 29,
                  "endColumn": 30,
                  "charOffset": 2975,
                  "charLength": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 19,
                  "endColumn": 34,
                  "charOffset": 3159,
                  "charLength": 15
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyReadabilityDeleteNullPointer",
          "level": "note",
          "message": {
            "text": "'if' statement is unnecessary; deleting null pointer has no effect [readability-delete-null-pointer]",
            "id": "CppClangTidyReadabilityDeleteNullPointer"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 4,
                  "endColumn": 25,
                  "charOffset": 3241,
                  "charLength": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyReadabilityDeleteNullPointer",
          "level": "note",
          "message": {
            "text": "'if' statement is unnecessary; deleting null pointer has no effect [readability-delete-null-pointer]",
            "id": "CppClangTidyReadabilityDeleteNullPointer"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 4,
                  "endColumn": 34,
                  "charOffset": 3285,
                  "charLength": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppMemberFunctionMayBeConst",
          "level": "note",
          "message": {
            "text": "Member function can be made const",
            "id": "CppMemberFunctionMayBeConst"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 15,
                  "endColumn": 25,
                  "charOffset": 3399,
                  "charLength": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 17,
                  "endColumn": 22,
                  "charOffset": 3443,
                  "charLength": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 21,
                  "endColumn": 35,
                  "charOffset": 3910,
                  "charLength": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyClangDiagnosticCastQual",
          "message": {
            "text": "Cast from 'char **' to 'const char **' must have all intermediate pointers const qualified to be safe [clang-diagnostic-cast-qual]",
            "id": "CppClangTidyClangDiagnosticCastQual"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 35,
                  "endColumn": 39,
                  "charOffset": 3924,
                  "charLength": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppInitializedValueIsAlwaysRewritten",
          "message": {
            "text": "Local variable 'remove_modifier' is reassigned in all paths before being read",
            "id": "CppInitializedValueIsAlwaysRewritten"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 9,
                  "endColumn": 24,
                  "charOffset": 4399,
                  "charLength": 15
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 18,
                  "endColumn": 26,
                  "charOffset": 4442,
                  "charLength": 8
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyClangDiagnosticCastQual",
          "message": {
            "text": "Cast from 'const char *' to 'char *' drops const qualifier [clang-diagnostic-cast-qual]",
            "id": "CppClangTidyClangDiagnosticCastQual"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 26,
                  "endColumn": 27,
                  "charOffset": 4450,
                  "charLength": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppLocalVariableMayBeConst",
          "level": "note",
          "message": {
            "text": "Local variable 'len' can be made const",
            "id": "CppLocalVariableMayBeConst"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 13,
                  "endColumn": 16,
                  "charOffset": 5122,
                  "charLength": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppMemberFunctionMayBeConst",
          "level": "note",
          "message": {
            "text": "Member function can be made const",
            "id": "CppMemberFunctionMayBeConst"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 8,
                  "endColumn": 19,
                  "charOffset": 6715,
                  "charLength": 11
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 17,
                  "endColumn": 22,
                  "charOffset": 6760,
                  "charLength": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppMemberFunctionMayBeConst",
          "level": "note",
          "message": {
            "text": "Member function can be made const",
            "id": "CppMemberFunctionMayBeConst"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 8,
                  "endColumn": 23,
                  "charOffset": 6852,
                  "charLength": 15
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 17,
                  "endColumn": 22,
                  "charOffset": 6901,
                  "charLength": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyCertErr34C",
          "level": "note",
          "message": {
            "text": "'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]",
            "id": "CppClangTidyCertErr34C"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 13,
                  "endColumn": 17,
                  "charOffset": 7610,
                  "charLength": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyCertErr34C",
          "level": "note",
          "message": {
            "text": "'atol' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]",
            "id": "CppClangTidyCertErr34C"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 13,
                  "endColumn": 17,
                  "charOffset": 7794,
                  "charLength": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppMemberFunctionMayBeConst",
          "level": "note",
          "message": {
            "text": "Member function can be made const",
            "id": "CppMemberFunctionMayBeConst"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 8,
                  "endColumn": 13,
                  "charOffset": 8383,
                  "charLength": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppParameterMayBeConstPtrOrRef",
          "level": "note",
          "message": {
            "text": "Parameter 'key' can be made pointer to const",
            "id": "CppParameterMayBeConstPtrOrRef"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 37,
                  "endColumn": 40,
                  "charOffset": 9303,
                  "charLength": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppParameterMayBeConstPtrOrRef",
          "level": "note",
          "message": {
            "text": "Parameter 'key' can be made pointer to const",
            "id": "CppParameterMayBeConstPtrOrRef"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 36,
                  "endColumn": 39,
                  "charOffset": 9563,
                  "charLength": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppParameterMayBeConstPtrOrRef",
          "level": "note",
          "message": {
            "text": "Parameter 'value' can be made pointer to const",
            "id": "CppParameterMayBeConstPtrOrRef"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 42,
                  "endColumn": 47,
                  "charOffset": 9828,
                  "charLength": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppMemberFunctionMayBeConst",
          "level": "note",
          "message": {
            "text": "Member function can be made const",
            "id": "CppMemberFunctionMayBeConst"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 8,
                  "endColumn": 11,
                  "charOffset": 9891,
                  "charLength": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppMemberFunctionMayBeConst",
          "level": "note",
          "message": {
            "text": "Member function can be made const",
            "id": "CppMemberFunctionMayBeConst"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 28,
                  "endColumn": 38,
                  "charOffset": 10541,
                  "charLength": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppMemberFunctionMayBeConst",
          "level": "note",
          "message": {
            "text": "Member function can be made const",
            "id": "CppMemberFunctionMayBeConst"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 28,
                  "endColumn": 36,
                  "charOffset": 10609,
                  "charLength": 8
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 25,
                  "endColumn": 30,
                  "charOffset": 10982,
                  "charLength": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppLocalVariableMayBeConst",
          "level": "note",
          "message": {
            "text": "Local variable 'len' can be made const",
            "id": "CppLocalVariableMayBeConst"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 13,
                  "endColumn": 16,
                  "charOffset": 11116,
                  "charLength": 3
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 21,
                  "endColumn": 26,
                  "charOffset": 11291,
                  "charLength": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 26,
                  "endColumn": 31,
                  "charOffset": 11472,
                  "charLength": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 491,
                  "startColumn": 26,
                  "endColumn": 31,
                  "charOffset": 11590,
                  "charLength": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 25,
                  "endColumn": 30,
                  "charOffset": 11836,
                  "charLength": 5
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppZeroConstantCanBeReplacedWithNullptr",
          "level": "note",
          "message": {
            "text": "Zero constant can be replaced with nullptr",
            "id": "CppZeroConstantCanBeReplacedWithNullptr"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 12,
                  "endColumn": 13,
                  "charOffset": 12453,
                  "charLength": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppLocalVariableMayBeConst",
          "level": "note",
          "message": {
            "text": "Local variable 'size' can be made const",
            "id": "CppLocalVariableMayBeConst"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 531,
                  "startColumn": 10,
                  "endColumn": 14,
                  "charOffset": 12513,
                  "charLength": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 533,
                  "startColumn": 18,
                  "endColumn": 25,
                  "charOffset": 12574,
                  "charLength": 7
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppNonInlineFunctionDefinitionInHeaderFile",
          "message": {
            "text": "Definition of function 'void option::free(void* argv)' in a header file should have an 'inline' specifier",
            "id": "CppNonInlineFunctionDefinitionInHeaderFile"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 7,
                  "endColumn": 11,
                  "charOffset": 12697,
                  "charLength": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppNonInlineFunctionDefinitionInHeaderFile",
          "message": {
            "text": "Definition of function 'char** option::CommandLineToArgvA(char* lpCmdline, int* numargs)' in a header file should have an 'inline' specifier",
            "id": "CppNonInlineFunctionDefinitionInHeaderFile"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 574,
                  "startColumn": 9,
                  "endColumn": 27,
                  "charOffset": 14136,
                  "charLength": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppJoinDeclarationAndAssignment",
          "level": "note",
          "message": {
            "text": "Declaration and assignment can be joined",
            "id": "CppJoinDeclarationAndAssignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 12,
                  "endColumn": 16,
                  "charOffset": 14202,
                  "charLength": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppJoinDeclarationAndAssignment",
          "level": "note",
          "message": {
            "text": "Declaration and assignment can be joined",
            "id": "CppJoinDeclarationAndAssignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 577,
                  "startColumn": 10,
                  "endColumn": 14,
                  "charOffset": 14218,
                  "charLength": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppJoinDeclarationAndAssignment",
          "level": "note",
          "message": {
            "text": "Declaration and assignment can be joined",
            "id": "CppJoinDeclarationAndAssignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 578,
                  "startColumn": 9,
                  "endColumn": 10,
                  "charOffset": 14233,
                  "charLength": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppJoinDeclarationAndAssignment",
          "level": "note",
          "message": {
            "text": "Declaration and assignment can be joined",
            "id": "CppJoinDeclarationAndAssignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 9,
                  "endColumn": 16,
                  "charOffset": 14257,
                  "charLength": 7
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppJoinDeclarationAndAssignment",
          "level": "note",
          "message": {
            "text": "Declaration and assignment can be joined",
            "id": "CppJoinDeclarationAndAssignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 7,
                  "endColumn": 13,
                  "charOffset": 14273,
                  "charLength": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppZeroConstantCanBeReplacedWithNullptr",
          "level": "note",
          "message": {
            "text": "Zero constant can be replaced with nullptr",
            "id": "CppZeroConstantCanBeReplacedWithNullptr"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 585,
                  "startColumn": 11,
                  "endColumn": 15,
                  "charOffset": 14343,
                  "charLength": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 660,
                  "startColumn": 10,
                  "endColumn": 18,
                  "charOffset": 15908,
                  "charLength": 8
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppCStyleCast",
          "level": "note",
          "message": {
            "text": "C-style cast is used instead of a C++ cast",
            "id": "CppCStyleCast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 663,
                  "startColumn": 13,
                  "endColumn": 20,
                  "charOffset": 16040,
                  "charLength": 7
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyBugproneNarrowingConversions",
          "message": {
            "text": "Narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]",
            "id": "CppClangTidyBugproneNarrowingConversions"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 15,
                  "endColumn": 19,
                  "charOffset": 16908,
                  "charLength": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppZeroConstantCanBeReplacedWithNullptr",
          "level": "note",
          "message": {
            "text": "Zero constant can be replaced with nullptr",
            "id": "CppZeroConstantCanBeReplacedWithNullptr"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 773,
                  "startColumn": 16,
                  "endColumn": 20,
                  "charOffset": 18330,
                  "charLength": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppClangTidyBugproneNarrowingConversions",
          "message": {
            "text": "Narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]",
            "id": "CppClangTidyBugproneNarrowingConversions"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 774,
                  "startColumn": 14,
                  "endColumn": 18,
                  "charOffset": 18350,
                  "charLength": 4
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppNonInlineFunctionDefinitionInHeaderFile",
          "message": {
            "text": "Definition of function 'char** option::CommandLineToArgvWin(LPSTR lpCmdline, int* numargs)' in a header file should have an 'inline' specifier",
            "id": "CppNonInlineFunctionDefinitionInHeaderFile"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 782,
                  "startColumn": 9,
                  "endColumn": 29,
                  "charOffset": 18409,
                  "charLength": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "CppParameterValueIsReassigned",
          "message": {
            "text": "Parameter 'lpCmdline' is always rewritten in function body before being read",
            "id": "CppParameterValueIsReassigned"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "options/optionparser.h",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 782,
                  "startColumn": 36,
                  "endColumn": 45,
                  "charOffset": 18436,
                  "charLength": 9
                }
              }
            }
          ]
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}