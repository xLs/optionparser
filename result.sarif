<?xml version="1.0" encoding="utf-8"?>
<!-- Generated by JetBrains Inspect Code 2021.2.1 -->
<Report ToolsVersion="212.0.20210826.112035">
  <Information>
    <Solution>options.sln</Solution>
    <InspectionScope>
      <Element>Solution</Element>
    </InspectionScope>
  </Information>
  <IssueTypes>
    <IssueType Id="CppCStyleCast" Category="Common Practices and Code Improvements" CategoryId="BestPractice" Description="C-style cast is used instead of a C++ cast" Severity="SUGGESTION" />
    <IssueType Id="CppClangTidyBugproneNarrowingConversions" Category="Clang-Tidy Checks" CategoryId="ClangTidy" Description="bugprone-narrowing-conversions clang-tidy check" Severity="WARNING" />
    <IssueType Id="CppClangTidyCertErr34C" Category="Clang-Tidy Checks" CategoryId="ClangTidy" Description="cert-err34-c clang-tidy check" Severity="SUGGESTION" />
    <IssueType Id="CppClangTidyClangDiagnosticCastQual" Category="Clang Diagnostics" CategoryId="Clang" Description="cast-qual clang diagnostic" Severity="WARNING" />
    <IssueType Id="CppClangTidyClangDiagnosticMain" Category="Clang Diagnostics" CategoryId="Clang" Description="main clang diagnostic" Severity="WARNING" />
    <IssueType Id="CppClangTidyCppcoreguidelinesSpecialMemberFunctions" Category="Clang-Tidy Checks" CategoryId="ClangTidy" Description="cppcoreguidelines-special-member-functions clang-tidy check" Severity="SUGGESTION" />
    <IssueType Id="CppClangTidyReadabilityDeleteNullPointer" Category="Clang-Tidy Checks" CategoryId="ClangTidy" Description="readability-delete-null-pointer clang-tidy check" Severity="SUGGESTION" />
    <IssueType Id="CppClangTidyReadabilityInconsistentDeclarationParameterName" Category="Clang-Tidy Checks" CategoryId="ClangTidy" Description="readability-inconsistent-declaration-parameter-name clang-tidy check" Severity="SUGGESTION" />
    <IssueType Id="CppFunctionDoesntReturnValue" Category="Potential Code Quality Issues" CategoryId="CodeSmell" Description="No return statement in a function or a lambda returning non-void" Severity="WARNING" />
    <IssueType Id="CppInitializedValueIsAlwaysRewritten" Category="Potential Code Quality Issues" CategoryId="CodeSmell" Description="Declarator is reassigned in all paths before being read" Severity="WARNING" />
    <IssueType Id="CppJoinDeclarationAndAssignment" Category="Redundancies in Code" CategoryId="CodeRedundancy" Description="Declaration and assignment can be joined" Severity="SUGGESTION" />
    <IssueType Id="CppLocalVariableMayBeConst" Category="Common Practices and Code Improvements" CategoryId="BestPractice" Description="Local variable can be made const" Severity="SUGGESTION" />
    <IssueType Id="CppMemberFunctionMayBeConst" Category="Common Practices and Code Improvements" CategoryId="BestPractice" Description="Member function can be made const" Severity="SUGGESTION" />
    <IssueType Id="CppNonInlineFunctionDefinitionInHeaderFile" Category="Potential Code Quality Issues" CategoryId="CodeSmell" Description="Non-inline function definition in a header file" Severity="WARNING" />
    <IssueType Id="CppParameterMayBeConstPtrOrRef" Category="Common Practices and Code Improvements" CategoryId="BestPractice" Description="Parameter can be made pointer/reference to const" Severity="SUGGESTION" />
    <IssueType Id="CppParameterValueIsReassigned" Category="Potential Code Quality Issues" CategoryId="CodeSmell" Description="Parameter is always rewritten in function body before being read" Severity="WARNING" />
    <IssueType Id="CppPossiblyUninitializedMember" Category="Potential Code Quality Issues" CategoryId="CodeSmell" Description="Possibly uninitialized class member" Severity="WARNING" />
    <IssueType Id="CppVariableCanBeMadeConstexpr" Category="Common Practices and Code Improvements" CategoryId="BestPractice" Description="Variable can be made constexpr" Severity="SUGGESTION" />
    <IssueType Id="CppZeroConstantCanBeReplacedWithNullptr" Category="Common Practices and Code Improvements" CategoryId="BestPractice" Description="Zero constant can be replaced with nullptr" Severity="SUGGESTION" />
  </IssueTypes>
  <Issues>
    <Project Name="options">
      <Issue TypeId="CppVariableCanBeMadeConstexpr" File="options.cpp" Offset="210-215" Line="10" Message="Variable 'usage' can be made constexpr" />
      <Issue TypeId="CppZeroConstantCanBeReplacedWithNullptr" File="options.cpp" Offset="231-232" Line="12" Message="Zero constant can be replaced with nullptr" />
      <Issue TypeId="CppZeroConstantCanBeReplacedWithNullptr" File="options.cpp" Offset="234-235" Line="12" Message="Zero constant can be replaced with nullptr" />
      <Issue TypeId="CppZeroConstantCanBeReplacedWithNullptr" File="options.cpp" Offset="957-958" Line="20" Message="Zero constant can be replaced with nullptr" />
      <Issue TypeId="CppZeroConstantCanBeReplacedWithNullptr" File="options.cpp" Offset="960-961" Line="20" Message="Zero constant can be replaced with nullptr" />
      <Issue TypeId="CppZeroConstantCanBeReplacedWithNullptr" File="options.cpp" Offset="1277-1278" Line="24" Message="Zero constant can be replaced with nullptr" />
      <Issue TypeId="CppZeroConstantCanBeReplacedWithNullptr" File="options.cpp" Offset="1280-1281" Line="24" Message="Zero constant can be replaced with nullptr" />
      <Issue TypeId="CppZeroConstantCanBeReplacedWithNullptr" File="options.cpp" Offset="1465-1466" Line="28" Message="Zero constant can be replaced with nullptr" />
      <Issue TypeId="CppZeroConstantCanBeReplacedWithNullptr" File="options.cpp" Offset="1468-1469" Line="28" Message="Zero constant can be replaced with nullptr" />
      <Issue TypeId="CppZeroConstantCanBeReplacedWithNullptr" File="options.cpp" Offset="1489-1490" Line="28" Message="Zero constant can be replaced with nullptr" />
      <Issue TypeId="CppCStyleCast" File="options.cpp" Offset="1581-1602" Line="34" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppClangTidyClangDiagnosticCastQual" File="options.cpp" Offset="1602-1607" Line="34" Message="Cast from 'const option::Descriptor *' to 'option::Descriptor *' drops const qualifier [clang-diagnostic-cast-qual]" />
      <Issue TypeId="CppFunctionDoesntReturnValue" File="options.cpp" Offset="2706-2714" Line="99" Message="No return statement in a function returning non-void" />
      <Issue TypeId="CppClangTidyClangDiagnosticMain" File="options.cpp" Offset="2893-2897" Line="103" Message="ISO C++ does not allow 'main' to be used by a program [clang-diagnostic-main]" />
      <Issue TypeId="CppCStyleCast" File="options.cpp" Offset="2904-2918" Line="103" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppClangTidyClangDiagnosticCastQual" File="options.cpp" Offset="2918-2919" Line="103" Message="Cast from 'char **' to 'const char **' must have all intermediate pointers const qualified to be safe [clang-diagnostic-cast-qual]" />
      <Issue TypeId="CppClangTidyReadabilityInconsistentDeclarationParameterName" File="options\optionparser.h" Offset="1041-1045" Line="36" Message="Function 'option::free' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]" />
      <Issue TypeId="CppClangTidyCppcoreguidelinesSpecialMemberFunctions" File="options\optionparser.h" Offset="1285-1288" Line="51" Message="Class 'Arg' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]" />
      <Issue TypeId="CppClangTidyReadabilityDeleteNullPointer" File="options\optionparser.h" Offset="1659-1681" Line="75" Message="'if' statement is unnecessary; deleting null pointer has no effect [readability-delete-null-pointer]" />
      <Issue TypeId="CppNonInlineFunctionDefinitionInHeaderFile" File="options\optionparser.h" Offset="2290-2297" Line="108" Message="Definition of function 'size_t option::desclen(const Descriptor* descs)' in a header file should have an 'inline' specifier" />
      <Issue TypeId="CppClangTidyCppcoreguidelinesSpecialMemberFunctions" File="options\optionparser.h" Offset="2448-2455" Line="115" Message="Class 'Options' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]" />
      <Issue TypeId="CppPossiblyUninitializedMember" File="options\optionparser.h" Offset="2473-2480" Line="118" Message="Member '_message' is not initialized in this constructor" />
      <Issue TypeId="CppCStyleCast" File="options\optionparser.h" Offset="2962-2975" Line="133" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppClangTidyClangDiagnosticCastQual" File="options\optionparser.h" Offset="2975-2976" Line="133" Message="Cast from 'const option::Descriptor *' to 'option::Descriptor *' drops const qualifier [clang-diagnostic-cast-qual]" />
      <Issue TypeId="CppCStyleCast" File="options\optionparser.h" Offset="3159-3174" Line="138" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppClangTidyReadabilityDeleteNullPointer" File="options\optionparser.h" Offset="3241-3262" Line="144" Message="'if' statement is unnecessary; deleting null pointer has no effect [readability-delete-null-pointer]" />
      <Issue TypeId="CppClangTidyReadabilityDeleteNullPointer" File="options\optionparser.h" Offset="3285-3315" Line="145" Message="'if' statement is unnecessary; deleting null pointer has no effect [readability-delete-null-pointer]" />
      <Issue TypeId="CppMemberFunctionMayBeConst" File="options\optionparser.h" Offset="3399-3409" Line="150" Message="Member function can be made const" />
      <Issue TypeId="CppCStyleCast" File="options\optionparser.h" Offset="3443-3448" Line="152" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppCStyleCast" File="options\optionparser.h" Offset="3910-3924" Line="171" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppClangTidyClangDiagnosticCastQual" File="options\optionparser.h" Offset="3924-3928" Line="171" Message="Cast from 'char **' to 'const char **' must have all intermediate pointers const qualified to be safe [clang-diagnostic-cast-qual]" />
      <Issue TypeId="CppInitializedValueIsAlwaysRewritten" File="options\optionparser.h" Offset="4399-4414" Line="191" Message="Local variable 'remove_modifier' is reassigned in all paths before being read" />
      <Issue TypeId="CppCStyleCast" File="options\optionparser.h" Offset="4442-4450" Line="192" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppClangTidyClangDiagnosticCastQual" File="options\optionparser.h" Offset="4450-4451" Line="192" Message="Cast from 'const char *' to 'char *' drops const qualifier [clang-diagnostic-cast-qual]" />
      <Issue TypeId="CppLocalVariableMayBeConst" File="options\optionparser.h" Offset="5122-5125" Line="216" Message="Local variable 'len' can be made const" />
      <Issue TypeId="CppMemberFunctionMayBeConst" File="options\optionparser.h" Offset="6715-6726" Line="294" Message="Member function can be made const" />
      <Issue TypeId="CppCStyleCast" File="options\optionparser.h" Offset="6760-6765" Line="296" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppMemberFunctionMayBeConst" File="options\optionparser.h" Offset="6852-6867" Line="300" Message="Member function can be made const" />
      <Issue TypeId="CppCStyleCast" File="options\optionparser.h" Offset="6901-6906" Line="302" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppClangTidyCertErr34C" File="options\optionparser.h" Offset="7610-7614" Line="329" Message="'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]" />
      <Issue TypeId="CppClangTidyCertErr34C" File="options\optionparser.h" Offset="7794-7798" Line="337" Message="'atol' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]" />
      <Issue TypeId="CppMemberFunctionMayBeConst" File="options\optionparser.h" Offset="8383-8388" Line="357" Message="Member function can be made const" />
      <Issue TypeId="CppParameterMayBeConstPtrOrRef" File="options\optionparser.h" Offset="9303-9306" Line="391" Message="Parameter 'key' can be made pointer to const" />
      <Issue TypeId="CppParameterMayBeConstPtrOrRef" File="options\optionparser.h" Offset="9563-9566" Line="401" Message="Parameter 'key' can be made pointer to const" />
      <Issue TypeId="CppParameterMayBeConstPtrOrRef" File="options\optionparser.h" Offset="9828-9833" Line="411" Message="Parameter 'value' can be made pointer to const" />
      <Issue TypeId="CppMemberFunctionMayBeConst" File="options\optionparser.h" Offset="9891-9894" Line="416" Message="Member function can be made const" />
      <Issue TypeId="CppMemberFunctionMayBeConst" File="options\optionparser.h" Offset="10541-10551" Line="454" Message="Member function can be made const" />
      <Issue TypeId="CppMemberFunctionMayBeConst" File="options\optionparser.h" Offset="10609-10617" Line="456" Message="Member function can be made const" />
      <Issue TypeId="CppCStyleCast" File="options\optionparser.h" Offset="10982-10987" Line="470" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppLocalVariableMayBeConst" File="options\optionparser.h" Offset="11116-11119" Line="476" Message="Local variable 'len' can be made const" />
      <Issue TypeId="CppCStyleCast" File="options\optionparser.h" Offset="11291-11296" Line="480" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppCStyleCast" File="options\optionparser.h" Offset="11472-11477" Line="486" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppCStyleCast" File="options\optionparser.h" Offset="11590-11595" Line="491" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppCStyleCast" File="options\optionparser.h" Offset="11836-11841" Line="499" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppZeroConstantCanBeReplacedWithNullptr" File="options\optionparser.h" Offset="12453-12454" Line="528" Message="Zero constant can be replaced with nullptr" />
      <Issue TypeId="CppLocalVariableMayBeConst" File="options\optionparser.h" Offset="12513-12517" Line="531" Message="Local variable 'size' can be made const" />
      <Issue TypeId="CppCStyleCast" File="options\optionparser.h" Offset="12574-12581" Line="533" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppNonInlineFunctionDefinitionInHeaderFile" File="options\optionparser.h" Offset="12697-12701" Line="541" Message="Definition of function 'void option::free(void* argv)' in a header file should have an 'inline' specifier" />
      <Issue TypeId="CppNonInlineFunctionDefinitionInHeaderFile" File="options\optionparser.h" Offset="14136-14154" Line="574" Message="Definition of function 'char** option::CommandLineToArgvA(char* lpCmdline, int* numargs)' in a header file should have an 'inline' specifier" />
      <Issue TypeId="CppJoinDeclarationAndAssignment" File="options\optionparser.h" Offset="14202-14206" Line="576" Message="Declaration and assignment can be joined" />
      <Issue TypeId="CppJoinDeclarationAndAssignment" File="options\optionparser.h" Offset="14218-14222" Line="577" Message="Declaration and assignment can be joined" />
      <Issue TypeId="CppJoinDeclarationAndAssignment" File="options\optionparser.h" Offset="14233-14234" Line="578" Message="Declaration and assignment can be joined" />
      <Issue TypeId="CppJoinDeclarationAndAssignment" File="options\optionparser.h" Offset="14257-14264" Line="580" Message="Declaration and assignment can be joined" />
      <Issue TypeId="CppJoinDeclarationAndAssignment" File="options\optionparser.h" Offset="14273-14279" Line="581" Message="Declaration and assignment can be joined" />
      <Issue TypeId="CppZeroConstantCanBeReplacedWithNullptr" File="options\optionparser.h" Offset="14343-14347" Line="585" Message="Zero constant can be replaced with nullptr" />
      <Issue TypeId="CppCStyleCast" File="options\optionparser.h" Offset="15908-15916" Line="660" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppCStyleCast" File="options\optionparser.h" Offset="16040-16047" Line="663" Message="C-style cast is used instead of a C++ cast" />
      <Issue TypeId="CppClangTidyBugproneNarrowingConversions" File="options\optionparser.h" Offset="16908-16912" Line="702" Message="Narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]" />
      <Issue TypeId="CppZeroConstantCanBeReplacedWithNullptr" File="options\optionparser.h" Offset="18330-18334" Line="773" Message="Zero constant can be replaced with nullptr" />
      <Issue TypeId="CppClangTidyBugproneNarrowingConversions" File="options\optionparser.h" Offset="18350-18354" Line="774" Message="Narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]" />
      <Issue TypeId="CppNonInlineFunctionDefinitionInHeaderFile" File="options\optionparser.h" Offset="18409-18429" Line="782" Message="Definition of function 'char** option::CommandLineToArgvWin(LPSTR lpCmdline, int* numargs)' in a header file should have an 'inline' specifier" />
      <Issue TypeId="CppParameterValueIsReassigned" File="options\optionparser.h" Offset="18436-18445" Line="782" Message="Parameter 'lpCmdline' is always rewritten in function body before being read" />
    </Project>
  </Issues>
</Report>